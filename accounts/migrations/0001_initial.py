# Generated by Django 3.2.13 on 2022-11-30 01:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import imagekit.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('petname', models.CharField(max_length=25)),
                ('petage', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('petgender', models.CharField(choices=[('선택', None), ('M', '남아'), ('W', '여아')], default='선택', max_length=2)),
                ('neutralization', models.CharField(choices=[('선택', None), ('Y', '중성화 완료'), ('N', '중성화 전')], default='선택', max_length=2)),
                ('species', models.CharField(choices=[('선택', None), ('dog', '강아지'), ('cat', '고양이')], default='선택', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_name', models.CharField(max_length=25)),
                ('first_name', models.CharField(max_length=25)),
                ('age', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('gender', models.CharField(choices=[('선택', None), ('M', '남자'), ('W', '여자')], default='선택', max_length=2)),
                ('address', models.CharField(max_length=250)),
                ('phone_num', models.CharField(blank=True, default='', max_length=11, null=True, validators=[django.core.validators.RegexValidator(regex='^01([0|1|6|7|8|9]-?([0-9]{3,4})-?([0-9]{4})$')])),
                ('profile_image', imagekit.models.fields.ProcessedImageField(blank=True, upload_to='images/accounts/')),
                ('kakao_id', models.BigIntegerField(null=True, unique=True)),
                ('naver_id', models.CharField(max_length=100, null=True, unique=True)),
                ('google_id', models.CharField(max_length=100, null=True, unique=True)),
                ('followings', models.ManyToManyField(related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('liking', models.ManyToManyField(related_name='like', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
